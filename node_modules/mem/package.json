{
  "_args": [
    [
      {
        "raw": "mem@^0.1.0",
        "scope": null,
        "escapedName": "mem",
        "name": "mem",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/Users/anandmohanduddella/Documents/development/node/soumya_assignment/myapp/node_modules/username"
    ]
  ],
  "_from": "mem@>=0.1.0 <0.2.0",
  "_id": "mem@0.1.1",
  "_inCache": true,
  "_location": "/mem",
  "_nodeVersion": "4.2.4",
  "_npmOperationalInternal": {
    "host": "packages-9-west.internal.npmjs.com",
    "tmp": "tmp/mem-0.1.1.tgz_1454428396859_0.8970216677989811"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "3.7.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mem@^0.1.0",
    "scope": null,
    "escapedName": "mem",
    "name": "mem",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/username"
  ],
  "_resolved": "https://registry.npmjs.org/mem/-/mem-0.1.1.tgz",
  "_shasum": "24df988c3102b03c074c1b296239c5b2e6647825",
  "_shrinkwrap": null,
  "_spec": "mem@^0.1.0",
  "_where": "/Users/anandmohanduddella/Documents/development/node/soumya_assignment/myapp/node_modules/username",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/mem/issues"
  },
  "dependencies": {},
  "description": "Memoize functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input",
  "devDependencies": {
    "ava": "*",
    "delay": "^1.1.0",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "24df988c3102b03c074c1b296239c5b2e6647825",
    "tarball": "https://registry.npmjs.org/mem/-/mem-0.1.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "65d4ab7fb3b43b71b3c968eff65329c8ebb3eee8",
  "homepage": "https://github.com/sindresorhus/mem#readme",
  "keywords": [
    "memoize",
    "function",
    "mem",
    "memoization",
    "cache",
    "caching",
    "optimize",
    "performance",
    "ttl",
    "expire",
    "promise"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "mem",
  "optionalDependencies": {},
  "readme": "# mem [![Build Status](https://travis-ci.org/sindresorhus/mem.svg?branch=master)](https://travis-ci.org/sindresorhus/mem)\n\n> [Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input\n\nRequires at least Node.js 0.12, unless you provide your own `cache` store.\n\n\n## Install\n\n```\n$ npm install --save mem\n```\n\n\n## Usage\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// cached as it's the same arguments\nmemoized('foo');\n//=> 1\n\n// not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n\n##### Works fine with promise returning functions\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = () => Promise.resolve(++i);\nconst memoized = mem(counter);\n\nmemoized().then(a => {\n\tconsole.log(a);\n\t//=> 1\n\n\tmemoized().then(b => {\n\t\t// the return value didn't increase as it's cached\n\t\tconsole.log(b);\n\t\t//=> 1\n\t});\n});\n```\n\n```js\nconst mem = require('mem');\nconst got = require('got');\nconst memGot = mem(got, {maxAge: 1000});\n\nmemGot('sindresorhus.com').then(() => {\n\t// this call is cached\n\tmemGot('sindresorhus.com').then(() => {\n\t\tsetTimeout(() => {\n\t\t\t// this call is not cached as the cache has expired\n\t\t\tmemGot('sindresorhus.com').then(() => {});\n\t\t}, 2000);\n\t});\n});\n```\n\n\n## API\n\n### mem(input, [options])\n\n#### input\n\nType: `function`\n\nFunction to be memoized.\n\n#### options\n\n##### maxAge\n\nType: `number`  \nDefault: `Infinity`\n\nMilliseconds until the cache expires.\n\n##### cacheKey\n\nType: `function`  \n\nDetermines the cache key for storing the result based on the function arguments. By default, if there's only one argument and it's a [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) it's used directly as a key, otherwise it's all the function arguments JSON stringified as an array.\n\nYou could for example change it to only cache on the first argument `x => JSON.stringify(x)`.\n\n##### cache\n\nType: `object`  \nDefault: `new Map()`\n\nUse a different cache storage. Must implement the following methods: `.has(key)`, `.get(key)`, `.set(key, value)`. You could for example use a `WeakMap` instead.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/mem.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "0.1.1"
}
